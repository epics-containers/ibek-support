# yaml-language-server: $schema=https://github.com/epics-containers/ibek/releases/download/3.0.1/ibek.support.schema.json

shared:
  - &NDArrayBase-model-parameters
      P:
        type: str
        description: |-
          Device Prefix

      R:
        type: str
        description: |-
          Device Suffix

      PORT:
        type: id
        description: |-
          Port name for this plugin

      ADDR:
        type: int
        description: |-
          Asyn port address
        default: 0

      TIMEOUT:
        type: int
        description: |-
          Asyn timeout
        default: 1

      NDARRAY_PORT:
        type: object
        description: |-
          Input array port name

      NDARRAY_ADDR:
        type: int
        description: |-
          Input array port address
        default: 0

      ENABLED:
        type: int
        description: |-
          Plugin Enabled at startup?
        default: 0

      SCANRATE:
        type: enum
        description: |-
          Specified scan rate for cpu intensive PVs
        default: I/O Intr
        values:
          .1 second:
          1 second:
          10 second:
          5 second:
          Passive:
          2 second:
          .2 second:
          .5 second:
          Event:
          I/O Intr:

      QUEUE:
        type: int
        description: |-
          Input array queue size
        default: 2

      BLOCK:
        type: int
        description: |-
          Blocking callbacks?
        default: 0

      XMLSIZE:
        type: int
        description: |-
          Number of elements of the ND attributes xml waveform record
        default: 1024

  - &NDArrayBase-threads
      MAX_THREADS:
        type: int
        description: |-
          Maximum number threads
        default: 1

  - &NDArrayBase-template-args
      P:
      R:
      PORT:
      NDARRAY_PORT:
      TIMEOUT:
      ADDR:
      NDARRAY_ADDR:
      ENABLED:
      SCANRATE:
      QUEUE:
      BLOCK:
      XMLSIZE:


module: ADCore

entity_models:
  - name: NDFileNexus
    description: |-
      This plugin can compress NDArrays to Nexus and write them to file
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDFileNexusConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileNexusConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDFileNexus.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDFileNexus.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDFFT
    description: |-
      This plugin is used to calculate the FFT of a time series
    parameters:
      <<: *NDArrayBase-model-parameters

      PRIORITY:
        type: int
        description: |-
          Thread priority if ASYN_CANBLOCK is set
        default: 0

      STACKSIZE:
        type: int
        description: |-
          Stack size if ASYN_CANBLOCK is set
        default: 0

      MAX_THREADS:
        type: int
        description: |-
          Maximum number threads
        default: 1

      NCHANS:
        type: str
        description: |-
          Length of time series waveform

      TIME_LINK:
        type: str
        description: |-
          Time in seconds between points (Can point to a record - use CP)
        default: "0.1"

      NAME:
        type: str
        description: |-
          Label for signal
        default: "0"

    pre_init:
      - when: first
        value: |

          # NDFFTConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
      - value: |
          NDFFTConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, {{PRIORITY}}, {{STACKSIZE}}, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDFFT.template
        args:
          <<: *NDArrayBase-template-args
          NAME:
          TIME_LINK:
          NCHANS:

    pvi:
      yaml_path: NDFFT.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDPosPlugin
    description: |-
      This plugin attaches position information to NDArrays
    parameters:
      <<: *NDArrayBase-model-parameters

      PRIORITY:
        type: int
        description: |-
          Max buffers to allocate
        default: 0

      STACKSIZE:
        type: int
        description: |-
          Max buffers to allocate
        default: 0

    pre_init:
      - value: |
          # NDPosPluginConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize)
          NDPosPluginConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, {{PRIORITY}}, {{STACKSIZE}})

    databases:
      - file: $(ADCORE)/db/NDPosPlugin.template
        args:
          <<: *NDArrayBase-template-args

  # _NDOverlayN subentity of NDOverlay #########################################

  - name: _NDOverlayN
    description: |-
      This plugin represents a single Overlay grouped by an NDOverlay plugin.
      Do not manually instantiate this - instead create an NDOverlay plugin,
      specifying the number of overlays required in the NOverlays argument.
    parameters:
      P:
        type: str
        description: |-
          Device Prefix

      R:
        type: str
        description: |-
          Device Suffix

      O:
        type: str
        description: |-
          NDOverlay Device Suffix

      NAME:
        type: str
        description: |-
          Name for the overlay

      # this is a string rather than ID as all overlayN's are on the same port
      # (with different address for ASYN to distinguish them)
      PORT:
        type: str
        description: |-
          Port name for the NDOverlay plugin

      ADDR:
        type: int
        description: |-
          Asyn Port address

      TIMEOUT:
        type: int
        description: |-
          Timeout
        default: 1

      SHAPE:
        type: enum
        values:
          0: Cross
          1: Rectangle
          2: Text
          3: Ellipse
        description: |-
          Shape of the overlay
        default: 1

      XPOS:
        type: int
        description: |-
          Link for the XPos of the overlay
        default: 0

      YPOS:
        type: int
        description: |-
          Link for the YPos of the overlay
        default: 0

      XSIZE:
        type: int
        description: |-
          Link for the XSize of the overlay
        default: 0

      YSIZE:
        type: int
        description: |-
          Link for the YSize of the overlay
        default: 0

      XWIDTH:
        type: int
        description: |-
          Link for the XWidth of the overlay
        default: 0

      YWIDTH:
        type: int
        description: |-
          Link for the YWdith of the overlay
        default: 0

    databases:
      - file: $(ADCORE)/db/NDOverlayN.template
        args:
          P:
          R:
          O:
          NAME:
          PORT:
          ADDR:
          TIMEOUT:
          SHAPE:
          XPOS:
          YPOS:
          XSIZE:
          YSIZE:
          XWIDTH:
          YWIDTH:

    pvi:
      yaml_path: NDOverlayN.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true

  - name: NDOverlay
    description: |-
      This plugin writes overlays on the ND array, ie. cursors and boxes
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

      NOverlays:
        type: int
        description: |-
          Number of overlays to create
        default: 8

    pre_init:
      - value: |
          # NDOverlayConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, NOverlays, maxBuffers, maxMemory, priority, stackSize, maxThreads)
          NDOverlayConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, {{NOverlays}}, 0, 0, 0, 0, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDOverlay.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDOverlay.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

    sub_entities:
      - type: ibek.repeat
        values: "{{ range(NOverlays) | list }}"
        variable: idx
        entity:
          type: ADCore._NDOverlayN
          NAME: Overlay {{ idx | int + 1 }}
          P: "{{ P }}"
          R: "{{ R }}{{ idx | int + 1 }}:"
          O: "{{ R }}"
          PORT: "{{ PORT }}"
          ADDR: "{{ idx | int }}"
          TIMEOUT: "{{ TIMEOUT }}"
          SHAPE: 1

  - name: NDColorConvert
    description: |-
      This plugin converts arrays from one colour type to another, e.g. Bayer -> RGB1
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

    pre_init:
      - value: |
          # NDColorConvertConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
          NDColorConvertConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, 0, 0, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDColorConvert.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDColorConvert.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDFileHDF5
    description: |-
      This plugin can compress NDArrays to HDF5 and write them to file
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDFileHDF5Configure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileHDF5Configure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDFileHDF5.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDFileHDF5.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDFileNull
    description: |-
      Null file plugin for deleting driver files
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDFileNullConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileNullConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDFileNull.template
        args:
          <<: *NDArrayBase-template-args

  - name: NDStdArrays
    description: |-
      This plugin provides a waveform record that can display the NDArrays
          produced by its NDARRAY_PORT
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

      TYPE:
        type: str
        description: |-
          Asyn Type e.g. Int32

      FTVL:
        type: enum
        description: |-
          Field Type of Value
        values:
          ENUM:
          SHORT:
          STRING:
          ULONG:
          UCHAR:
          DOUBLE:
          USHORT:
          LONG:
          FLOAT:
          CHAR:

      NELEMENTS:
        type: int
        description: |-
          Number of elements

    pre_init:
      - when: first
        value: |

          # NDStdArraysConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
      - value: |
          NDStdArraysConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, 0, 0, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDStdArrays.template
        args:
          <<: *NDArrayBase-template-args
          FTVL:
          NELEMENTS:
          TYPE:

    pvi:
      yaml_path: NDStdArrays.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: _NDCircularBuff
    description: |-
      TODO:ADD DESCRIPTION
    parameters:
      <<: *NDArrayBase-model-parameters

      PRECOUNT:
        type: int
        description: |-
          Pre-trigger frame count
        default: 100

      POSTCOUNT:
        type: int
        description: |-
          Post-trigger frame count
        default: 100

    databases:
      - file: $(ADCORE)/db/NDCircularBuff.template
        args:
          <<: *NDArrayBase-template-args
          PRECOUNT:
          POSTCOUNT:

  - name: NDFileMagick
    description: |-
      This plugin can compress NDArrays to a range of formats supported by
          graphics magick and write them to file
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDFileMagickConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileMagickConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDFileMagick.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDFileMagick.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDCircularBuff
    description: |-
      This plugin provides a pre and post external trigger frame capture buffer
    parameters:
      <<: *NDArrayBase-model-parameters

      POSTCOUNT:
        type: int
        description: |-
          Post-trigger frame count
        default: 100

      QUEUE:
        type: int
        description: |-
          Input array queue size
        default: 50

      MAX_BUFFERS:
        type: int
        description: |-
          Max buffer size in number of frames
        default: 128

      MAX_MEMORY:
        type: int
        description: |-
          Max memory size in bytes
        default: 1048576

    pre_init:
      - value: |
          # NDCircularBuffConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory)
          NDCircularBuffConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, {{MAX_BUFFERS}}, {{MAX_MEMORY}})

    databases:
      - file: $(ADCORE)/db/NDCircularBuff.template
        args:
          <<: *NDArrayBase-template-args
          PRECOUNT:
          POSTCOUNT:

    pvi:
      yaml_path: NDCircularBuff.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDAttrPlot
    description: |-
      TODO:ADD DESCRIPTION
    parameters:
      <<: *NDArrayBase-model-parameters

      N_CACHE:
        type: int
        description: |-
          Number of NDArrays to store in cache
        default: 10000

      ATTR_IND:
        type: str
        description: |-
          Attribute index

      AXIS:
        type: str
        description: |-
          Axis name

      DATA_IND:
        type: str
        description: |-
          Data index

      DATA_ADDR:
        type: str
        description: |-
          Asyn address for this data array

    pre_init:
      - value: |
          NDAttrPlotConfig("{{PORT}}", {{N_ATTRS}}, {{N_CACHE}},

    # TODO - MISSING ARGS: N_ATTRS
    databases:
      - file: $(ADCORE)/db/NDAttrPlotAttr.template
        args:
          P:
          R:
          PORT:
          ATTR_IND:

      - file: $(ADCORE)/db/NDAttrPlot.template
        args:
          <<: *NDArrayBase-template-args

      - file: $(ADCORE)/db/NDAttrPlotData.template
        args:
          DATA_ADDR:
          P:
          DATA_IND:
          R:
          N_CACHE:
          PORT:
          AXIS:

  - name: NDCodec
    description: |-
      This plugin can compress or decompress NDArrays
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

    pre_init:
      - value: |
          # NDCodecConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
          NDCodecConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, 0, 0, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDCodec.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDCodec.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDGather
    description: |-
      This plugin is used to gather NDArrays from multiple upstream plugins and merge them into a single stream
    parameters:
      <<: *NDArrayBase-model-parameters

      MAX_PORTS:
        type: int
        description: |-
          Maximum number of ports that this plugin can connect to for callbacks
        default: 5

    pre_init:
      - value: |
          # NDGatherConfigure(portName, queueSize, blockingCallbacks, maxPorts)
          NDGatherConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{MAX_PORTS}}")

    databases:
      - file: $(ADCORE)/db/NDGather.template
        args:
          <<: *NDArrayBase-template-args
          MAX_PORTS:

    pvi:
      yaml_path: NDGather.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDROI
    description: |-
      This plugin selects a region of interest and optionally scales it to
          fit in a particular data type
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

    pre_init:
      - value: |
          # NDROIConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
          NDROIConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, 0, 0, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDROI.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDROI.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDAttribute
    description: |-
      This plugin displays NDArray attributes
    parameters:
      <<: *NDArrayBase-model-parameters

      MAX_ATTRIBUTES:
        type: int
        description: |-
          Maximum number of attributes in this plugin
        default: 8

      NCHANS:
        type: int
        description: |-
          Number of points in the arrays
        default: 4096

      TS_PORT:
        type: str
        description: |-
          Asyn Port of Time Series plugin
        default: $(PORT)_TS

    pre_init:
      - when: first
        value: |
          # ADCore path for manual NDTimeSeries.template to find base plugin template
          epicsEnvSet "EPICS_DB_INCLUDE_PATH", "$(ADCORE)/db"

      - value: |
          # NDAttrConfigure(portName, queueSize, blockingCallbacks,
          NDAttrConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}},
          # NDTimeSeriesConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxSignals)
          NDTimeSeriesConfigure("{{PORT}}_TS", {{QUEUE}}, {{BLOCK}}, "{{PORT}}", 1, {{MAX_ATTRIBUTES}})
          # Load time series records

    databases:
      - file: $(ADCORE)/db/NDAttributeN.template
        args:
          ADDR:
          NCHANS:
          P:
          R:
          TIMEOUT:
          TS_PORT:
          PORT:

      - file: $(ADCORE)/db/NDAttribute.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDAttribute.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDStats
    description: |-
      This plugin calculates statistics like X and Y profile, centroid, and plots a histogram of binned pixels
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

      HIST_SIZE:
        type: int
        description: |-
          Maximum size of Pixel binning histogram (e.g. 256 for Int8)

      XSIZE:
        type: int
        description: |-
          XSIZE, Maximum size of X histograms (e.g. 1024)

      YSIZE:
        type: int
        description: |-
          Maximum size of Y histograms (e.g. 768)

      NCHANS:
        type: int
        description: |-
          Maximum length of time series (initialises waveform NELM, fixed on IOC boot)
        default: 2048

      MAX_BUFFERS:
        type: int
        description: |-
          Maximum number of buffers (0 = no limit)
        default: 0

      MAX_MEMORY:
        type: int
        description: |-
          Maximum memory size in bytes (0 = no limit)
        default: 0

      TS_PORT:
        type: str
        description: |-
          TS port
        default: $(PORT)_TS

    pre_init:
      - when: first
        value: |
          # ADCore path for manual NDTimeSeries.template to find base plugin template
          epicsEnvSet "EPICS_DB_INCLUDE_PATH", "$(ADCORE)/db"

          # NDStatsConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)

      - value: |
          NDStatsConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, {{MAX_BUFFERS}}, {{MAX_MEMORY}}, 0, 0, {{MAX_THREADS}})

    sub_entities:
      - { type: ADCore.NDTimeSeries, P: "{{P}}", R: "{{R}}TS:", PORT: "{{PORT}}_TS", NDARRAY_PORT: "{{PORT}}", NAME: "{{PORT}}_TS", NCHANS: "{{NCHANS}}", TIMEOUT: "{{TIMEOUT}}", ADDR: 0, NDARRAY_ADDR: 1, ENABLED: "{{ENABLED}}", QUEUE: "{{QUEUE}}", BLOCK: "{{BLOCK}}", NSIGNALS: 23 }

    databases:
      - file: $(ADCORE)/db/NDStats.template
        args:
          <<: *NDArrayBase-template-args
          XSIZE:
          NCHANS:
          YSIZE:
          HIST_SIZE:
          TS_PORT:

    pvi:
      yaml_path: NDStats.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDTimeSeries
    description: |-
      This plugin creates time series arrays from callback data
    parameters:
      <<: *NDArrayBase-model-parameters

      NCHANS:
        type: int
        description: |-
          Length of time series waveform

      TIME_LINK:
        type: str
        description: |-
          Time between points (Can point to a record - use CP)
        default: "0.1"

      NSIGNALS:
        type: int
        description: |-
          Maximum number of time series signals
        default: 1

      PRIORITY:
        type: int
        description: |-
          Thread priority if ASYN_CANBLOCK is set
        default: 0

      STACKSIZE:
        type: int
        description: |-
          Stack size if ASYN_CANBLOCK is set
        default: 0

      NAME:
        type: str
        description: |-
          Name of the signal

    pre_init:
      - when: first
        value: |

          # NDTimeSeriesConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxSignals, maxBuffers, maxMemory, priority, stackSize)

      - value: |
          NDTimeSeriesConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, {{NSIGNALS}}, 0, 0, {{PRIORITY}}, {{STACKSIZE}})

    databases:
      - file: $(ADCORE)/db/NDTimeSeries.template
        args:
          <<: *NDArrayBase-template-args
          TIME_LINK:
          NCHANS:

      - file: $(ADCORE)/db/NDTimeSeriesN.template
        args: { NAME, P, R, PORT, ADDR, TIMEOUT, NCHANS }

  - name: NDAttributes
    description: |-
      Add an attribute to the NDAttributes file for a particular ADDriver or
          NDPlugin, and associate it with the NDAttributes file
    parameters:
      port:
        type: object
        description: |-
          ADDriver or NDPlugin to attach xml file to

      source:
        type: str
        description: |-
          The EPICS PV (if type=EPICS_PV) or attribute name (if type=PARAM)

      name:
        type: id
        description: |-
          Object name. You do not need to specify this

      attrname:
        type: str
        description: |-
          Name of the attribute. If you leave this blank it defaults to <source>

      type:
        type: enum
        description: |-
          Where the data should be picked up from
        default: EPICS_PV
        values:
          EPICS_PV:
          PARAM:
      dbrtype:
        type: enum
        description: |-
          DBR type (only used if type=EPICS_PV)
        default: DBR_NATIVE
        values:
          DBR_STRING:
          DBR_INT:
          DBR_NATIVE:
          DBR_SHORT:
          DBR_CHAR:
          DBR_ENUM:
          DBR_LONG:
          DBR_FLOAT:
      datatype:
        type: enum
        description: |-
          Data type (only used if type=PARAM)
        default: INT
        values:
          INT:
          DOUBLE:
          STRING:
      description:
        type: str
        description: |-
          Description of the attribute

      addr:
        type: int
        description: |-
          Asyn address of the parameter (only used if type=PARAM)
        default: 0

    post_init:
      - value: |
          dbpf %s%sNDAttributesFile, %s/%s.xml

  - name: NDProcess
    description: |-
      This plugin does image processing like flat field correction, background
          subtraction, and recursive filtering
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDProcessConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDProcessConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDProcess.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDProcess.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDFileTIFF
    description: |-
      This plugin can compress NDArrays to TIFF and write them to file
    parameters:
      <<: *NDArrayBase-model-parameters

    databases:
      - file: $(ADCORE)/db/NDFileTIFF.template
        args:
          NDARRAY_PORT:
          ADDR:
          SCANRATE:
          NDARRAY_ADDR:
          ENABLED:
          P:
          R:
          PORT:
          TIMEOUT:

    pre_init:
      - value: |
          # NDFileTIFFConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileTIFFConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    pvi:
      yaml_path: NDFileTIFF.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: "$(P)$(R)"

  - name: NDGather8
    description: |-
      This plugin is used to gather NDArrays from multiple upstream plugins and merge them into a single stream
    parameters:
      <<: *NDArrayBase-model-parameters

      N:
        type: str
        description: |-
          Port number (1 - maxPorts)

      MAX_PORTS:
        type: str
        description: |-
          Maximum number ports

    databases:
      - file: $(ADCORE)/db/NDGatherN.template
        args:
          NDARRAY_PORT:
          ADDR:
          NDARRAY_ADDR:
          N:
          P:
          R:
          TIMEOUT:
          PORT:

      - file: $(ADCORE)/db/NDGather.template
        args:
          <<: *NDArrayBase-template-args
          MAX_PORTS:

  - name: NDROIStatN
    description: |-
      One of N ROIStat plugins for use by an NDROIStat plugin
    parameters:
      P:
        type: str
        description: |-
          First part of base PV name

      R:
        type: str
        description: |-
          Second part of base PV name

      PORT:
        type: str
        description: |-
          Port name for the NDROIStat plugin

      ADDR:
        type: int
        description: |-
          asyn address on port

      TIMEOUT:
        type: int
        description: |-
          Timeout
        default: 1

      NCHANS:
        type: int
        description: |-
          Number of channels

    databases:
      - file: $(ADCORE)/db/NDROIStatN.template
        args:
          P:
          R:
          PORT:
          ADDR:
          TIMEOUT:
          NCHANS:

    pvi:
      yaml_path: NDROIStatN.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true

  - name: NDROIStat
    description: |-
      This plugin calculates statistics of ROIs
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

      MAX_ROIS:
        type: int
        description: |-
          Maximum number of ROIs in this plugin
        default: 8

      NCHANS:
        type: int
        description: |-
          Number of points in the arrays
        default: 4096

    pre_init:
      - value: |
          # NDROIStatConfigure(portName, queueSize, blockingCallbacks,
          NDROIStatConfigure({{PORT}}, {{QUEUE}}, {{BLOCK}}, {{NDARRAY_PORT}}, {{NDARRAY_ADDR}}, {{MAX_ROIS}}, 0, 0, 0, 0, {{MAX_THREADS}})

    sub_entities:
      - type: ibek.repeat
        values: "{{ range(MAX_ROIS) | list }}"
        entity:
          type: ADCore.NDROIStatN
          P: "{{ P }}"
          R: "{{ R }}{{ index + 1}}:"
          PORT: "{{ PORT }}"
          ADDR: "{{ index }}"
          TIMEOUT: "{{ TIMEOUT }}"
          NCHANS: "{{ NCHANS }}"

    databases:
      - file: $(ADCORE)/db/NDROIStat.template
        args:
          <<: *NDArrayBase-template-args
          NCHANS:

    pvi:
      yaml_path: NDROIStat.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true

  - name: NDFileNetCDF
    description: |-
      This plugin can compress NDArrays to NetCDF and write them to file
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDFileNetCDFConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileNetCDFConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDFileNetCDF.template
        args:
          <<: *NDArrayBase-template-args

  - name: NDPvxsPlugin
    description: |-
      This plugin makes NDArrays available through PVAccess via PVXS
    parameters:
      <<: *NDArrayBase-model-parameters

      PVNAME:
        type: str
        description: |-
          Name of the PV to post NDArray out on

      PRIORITY:
        type: int
        description: |-
          Max buffers to allocate
        default: 0

      STACKSIZE:
        type: int
        description: |-
          Max buffers to allocate
        default: 0

    pre_init:
      - value: |
          # NDPvxsConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, pvName, maxBuffers, maxMemory, priority, stackSize)
          NDPvxsConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, {{PVNAME}}, 0, 0, {{PRIORITY}}, {{STACKSIZE}})

    databases:
      - file: $(ADCORE)/db/NDPva.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDPvxs.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDTransform
    description: |-
      This plugin selects a region of interest and optionally scales it to fit in a particular data type
    parameters:
      <<: [*NDArrayBase-model-parameters, *NDArrayBase-threads]

    pre_init:
      - value: |
          # NDTransformConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
          NDTransformConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}}, 0, 0, 0, 0, {{MAX_THREADS}})

    databases:
      - file: $(ADCORE)/db/NDTransform.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDTransform.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDFileJPEG
    description: |-
      This plugin can compress NDArrays to JPEG and write them to file
    parameters:
      <<: *NDArrayBase-model-parameters

    pre_init:
      - value: |
          # NDFileJPEGConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDFileJPEGConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})

    databases:
      - file: $(ADCORE)/db/NDFileJPEG.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDFileJPEG.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)

  - name: NDScatter
    description: |-
      This plugin is used to distribute processing of NDArrays to multiple downstream plugins
    parameters:
      <<: *NDArrayBase-model-parameters

      NAME:
        type: int
        description: |-
          Label for signal
        default: 0

    pre_init:
      - value: |
          # NDScatterConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr)
          NDScatterConfigure("{{PORT}}", {{QUEUE}}, {{BLOCK}}, "{{NDARRAY_PORT}}", {{NDARRAY_ADDR}})
    databases:
      - file: $(ADCORE)/db/NDScatter.template
        args:
          <<: *NDArrayBase-template-args

    pvi:
      yaml_path: NDScatter.pvi.device.yaml
      ui_macros:
        P:
        R:
      pv: true
      pv_prefix: $(P)$(R)
