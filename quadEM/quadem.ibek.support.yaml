# yaml-language-server: $schema=../schemas/ibek.support.schema.json

module: quadEM

entity_models:
  - name: TetrAMM
    description: |-
      TODO:ADD DESCRIPTION
    parameters:
      PORT:
        type: id
        description: |-
          Template argument

      P:
        type: str
        description: |-
          Base name of PV.

      R:
        type: str
        description: |-
          Second macro for name of PV.

      QSIZE:
        type: int
        description: |-
          ..
        default: 20

      RING_SIZE:
        type: int
        description: |-
          ..
        default: 10000

      IP:
        type: str
        description: |-
          IP address of the TetrAMM device

    pre_init:
      - value: |
          drvAsynIPPortConfigure({{PORT}}ip, {{IP}}, 100, 0, 0)
          asynOctetSetInputEos({{PORT}}ip, 0, "\r\n")
          asynOctetSetOutputEos({{PORT}}ip, 0, "\r")

          # drvTetrAMMConfigure(portName, IPportName, RingSize)
          drvTetrAMMConfigure("{{PORT}}", "{{PORT}}ip", {{RING_SIZE}})

    post_init:
      - value: |
          # Increase precision of sample time for TetrAMM
          dbpf("{{P}}{{R}}SampleTime_RBV.PREC", "5")

    databases:
      - file: $(QUADEM)/db/TetrAMM.template
        args:
          P:
          R:
          PORT:


    pvi:
      yaml_path: drvQuadEM.pvi.device.yaml
      pv_prefix: "{{ P }}"
      ui_macros:
        P:
        R:

  - name: Plugins
    description: |-
      Instantiates
        12 NDStats plugins for Current, Sum, Diff and Pos Channels
        12 NDTimeSeries plugins
        12 NDArray plugins
    parameters:
      NDARRAY_PORT:
        type: object
        description: |-
          Reference to the parent quadEM device

      PORTPREFIX:
        type: id
        description: |-
          The prefix for plugin asyn port names

      STAT_NCHAN:
        type: int
        description: |-
          Template argument

      STAT_XSIZE:
        type: int
        description: |-
          Template argument

      HIST_SIZE:
        type: int
        description: |-
          Template argument
        default: 256

      QUEUE:
        type: int
        description: |-
          length of NDArray queue
        default: 16

    pre_init:
      - value: |

          ################################################################################
          # Just demonstrating that Entities can have their own pre_init AND SubEntities.
          # This is the pre_init for quadem.Plugins device with id {{PORTPREFIX}}
          ################################################################################

          #

    shared:
      - &stats { type: ADCore.NDStats, P: "{{NDARRAY_PORT.P}}", NCHANS: "{{STAT_NCHAN}}", XSIZE: "{{STAT_XSIZE}}", YSIZE: 0, HIST_SIZE: "{{HIST_SIZE}}", NDARRAY_PORT: , ENABLED: 1 }
      - &arrays { type: ADCore.NDStdArrays, P: "{{NDARRAY_PORT.P}}", NDARRAY_PORT: , ENABLED: 1, TYPE: Float64, FTVL: DOUBLE, NELEMENTS: "{{STAT_XSIZE}}" }

    sub_entities:
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.I1", R: ":Cur1:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.I2", R: ":Cur2:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.I3", R: ":Cur3:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.I4", R: ":Cur4:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.SumX", R: ":SumX:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.SumY", R: ":SumY:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.SumAll", R: ":SumAll:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.DiffX", R: ":DiffX:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.DiffY", R: ":DiffY:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.PosX", R: ":PosX:" }
      - { <<: *stats, PORT: "{{PORTPREFIX}}.STATS.PosY", R: ":PosY:" }

      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.Arr1", R: ":Arr1:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.Arr2", R: ":Arr2:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.Arr3", R: ":Arr3:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.Arr4", R: ":Arr4:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.SumX", R: ":SumX:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.SumY", R: ":SumY:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.SumAll", R: ":SumAll:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.DiffX", R: ":DiffX:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.DiffY", R: ":DiffY:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.PosX", R: ":PosX:" }
      - { <<: *arrays, PORT: "{{PORTPREFIX}}.ARRAYS.PosY", R: ":PosY:" }

  - name: quadEM_TimeSeries
    description: |-
      Create a time series and FFT for each channel using ADCore
    parameters:
      PORT:
        type: id
        description: |-
          Asyn port name
      NDARRAY_PORT:
        type: object
        description: |-
          The parent quadEM device to add TS records to
      NUM_TS:
        type: int
        description: |-
          Number of elements in time series
        default: 2048
      NUM_FREQ:
        type: int
        description: |-
          Number of elements in FFT
        default: 2048
      QUEUE:
        type: int
        description: |-
          Size of the queue
        default: 16
      ARCHIVE:
        type: bool
        description: |-
          Add template with archive tags for useful PVs
        default: true

    databases:

      - file: $(QUADEM)/db/TimeSeriesPlugins_archiving.template
        args:
          P:
          R:

    pre_init:

      - value: |
          # ADCore path for time series and FFTs
          epicsEnvSet "EPICS_DB_INCLUDE_PATH", "$(ADCORE)/db"
          # TIME SERIES
          NDTimeSeriesConfigure("{{PORT}}", {{QUEUE}}, 0, "{{NDARRAY_PORT}}", 11, 11)
          # NDTimeSeries template
          dbLoadRecords("$(ADCORE)/db/NDTimeSeries.template", "P={{NDARRAY_PORT.P}}, R={{NDARRAY_PORT.R}}TS:, PORT={{PORT}}, ADDR=0, TIMEOUT=1, NDARRAY_PORT={{NDARRAY_PORT}}, NDARRAY_ADDR=11, NCHANS={{NUM_TS}}, TIME_LINK={{NDARRAY_PORT.P}}{{NDARRAY_PORT.R}}SampleTime_RBV CP MS, ENABLED=1")
          # NDTimeSeriesN template for each channel
          # {{SERIES}}

          # FFTs
          # {{SERIES}}
          dbLoadRecords("{{template}}", "{{args}}")

          # FFT NDStats
          # {{SERIES}}
          NDStatsConfigure("{{FFTSTATSPORT}}", 16, 0, {{FFTPORT}}, 0 , 50, 0)
          NDTimeSeriesConfigure("{{FFTSTATSPORT}}_TS", 16, 0, {{FFTSTATSPORT}}, 1 , 23)
          dbLoadRecords("{{template}}", "{{args}}")
        # TODO - MISSING ARGS: FFTSTATSPORT, NDARRAY_PORT, template, SERIES, args, P, R, FFTPORT
        # WARNING - non print commands in Initialise not parsed

    post_init:

      - value: |
          # Setting correct display precision for viewing
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSTimePerPoint.PREC", "5")
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSTimePerPoint_RBV.PREC", "5")
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSAveragingTime.PREC", "5")
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSAveragingTime_RBV.PREC", "5")
          # Setting averaging time for up to 10kHz
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSAveragingTime", "0.00005")
          # Defaulting to circular buffer
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSAcquireMode", "1")
          # Set channel size in Time series
          dbpf("{{NDARRAY_PORT.P}}{{R}}TS:TSNumPoints", "{{NUM_TS}}")
          # Suppress zero frequency DC in FFT by default
          dbpf("{{fftDcPv}}", "1")
        # TODO - MISSING ARGS: P, R, fftDcPv
        # WARNING - non print commands in Initialise not parsed